{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "pandas.ipynb",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Cheolgi-Kong/class2022Spring/blob/main/210322%20%ED%95%84%EA%B8%B0\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Importing libraries"
      ],
      "metadata": {
        "id": "t6YRFy8vHw3f"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd "
      ],
      "metadata": {
        "id": "km1FLv12HwfE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Loading csv file"
      ],
      "metadata": {
        "id": "l9hcO5nhFNBs"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "IlcjthG78XD5"
      },
      "outputs": [],
      "source": [
        "df = pd.read_csv(\"https://download.mlcc.google.com/mledu-datasets/california_housing_train.csv\", sep=\",\") #pandas 안의 read_csv라는 함수. (입력) \n",
        "df # 함수 안의 주소를 주소창에 입력 -> 다운로드 -> 파일 열기 -> csv 는 comma separated view라는 뜻으로, comma로 정보를 분리했다는 뜻. -> csv파일을 받아서 read 해서 df라는 변수로 입력.df는 data frame으로, 엑셀 파일 같은 형식."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df.size); print(df.ndim); print(df.shape) # size:17000x9  ndim:몇 차원인가.위는 2차원.  shpae: 17000행x9열"
      ],
      "metadata": {
        "id": "TccKwiUEB3S-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe() #위의 자료들에 대한 통계를 표시"
      ],
      "metadata": {
        "id": "kP3NoboG8iAs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Saving to CSV"
      ],
      "metadata": {
        "id": "YDgsE5VsG7EK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.to_csv('california_housing_train.csv') #옆에 파일로 만들어짐. (위에서 data frame으로 만든 것을 파일 형식으로 만듦) csv파일의 형태는 중요한 value들만 저장하는 훨씬 general한 파일.  "
      ],
      "metadata": {
        "id": "p0HH9Mf6G6xp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NysUV4ad32LJ"
      },
      "source": [
        "### Constructing a DataFrame using dict"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CI7tYc4Q32LK"
      },
      "outputs": [],
      "source": [
        "# Some input data - a small sample of the iris dataset\n",
        "data = {'sepal_length': [6.9, 6.9, 4.8, 5.4, 4.6], #5개 column의 이름.\n",
        "        'sepal_width': [3.2, 3.1, 3.4, 3.0, 3.6], #위의 contents가 5개 이므로 아래도 내용물 개수를 맞추어줌.\n",
        "        'petal_length': [5.7, 5.1, 1.9, 4.5, 1.0], \n",
        "        'petal_width': [2.3, 2.3, 0.2, 1.5, 0.2],\n",
        "        'species': ['virginica', 'virginica', 'setosa', 'versicolor', 'setosa']}\n",
        "\n",
        "df = pd.DataFrame(data) # data frame을 (새로) 만드는 과정. '열의 이름': [값]\n",
        "df "
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Constructing a DataFrame using pd.Series"
      ],
      "metadata": {
        "id": "4xktp6-HLv2W"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sepal_length = pd.Series([6.9, 6.9, 4.8, 5.4, 4.6]) #위의 것과 똑같이 생긴 data frame를 만듦.\n",
        "sepal_width = pd.Series([3.2, 3.1, 3.4, 3.0, 3.6])  #이것까지 data frame을 만드는 3가지 방법. 1) 불러오기 2) 위 3) 이것\n",
        "petal_length = pd.Series([5.7, 5.1, 1.9, 4.5, 1.0])\n",
        "petal_width = pd.Series([2.3, 2.3, 0.2, 1.5, 0.2])\n",
        "species = pd.Series(['virginica', 'virginica', 'setosa', 'versicolor', 'setosa'])\n",
        "\n",
        "df = pd.DataFrame({'sepal_length': sepal_length, 'sepal_width': sepal_width, 'petal_length': petal_length, 'petal_width': petal_width, 'SPECIES': species})\n",
        "df"
      ],
      "metadata": {
        "id": "tOXBW0W4_c3e"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "btyJ4nIB32LM"
      },
      "source": [
        "### Changing column names"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iBsTsL0J32LN"
      },
      "outputs": [],
      "source": [
        "# Change the columns \n",
        "df.columns = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species'] # 열의 이름을 바꾸어줌\n",
        "df"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8NRfX2U332LO"
      },
      "source": [
        "### Accessing columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DBAAnC1I32LO"
      },
      "outputs": [],
      "source": [
        "# Access one column \n",
        "df.loc[:, 'sepal_length'] #comma의 왼쪽은 행, 오른쪽은 열. ':'은 전부 다 -> sepal_length 열의 내용 전부 다 가져옴."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "gDBR--u832LO"
      },
      "outputs": [],
      "source": [
        "# Access one column (short-hand)\n",
        "df['sepal_length'] #위의 명령과 똑같음 간단히"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Access one column (shortest-hand)\n",
        "df.sepal_length # 더 간단히"
      ],
      "metadata": {
        "id": "ix7c1jzFQRTe"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DaXVg9Gs32LP"
      },
      "outputs": [],
      "source": [
        "# Access two columns\n",
        "df.loc[:, ['sepal_length', 'sepal_width']]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zyXCD9yl32LP"
      },
      "outputs": [],
      "source": [
        "# Access two columns (short-hand)\n",
        "df[['sepal_length', 'sepal_width']]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "G7IgmghJ32LP"
      },
      "source": [
        "### Accessing rows"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jS7CLQR532LP"
      },
      "outputs": [],
      "source": [
        "# Access one row \n",
        "df.loc[3, :] # 3행에 해당하는 값들을 column들과 함께 전부 가져옴"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_eZBMb0q32LP"
      },
      "outputs": [],
      "source": [
        "# Access two rows\n",
        "df.loc[[3, 0], :] #3번째 행과 0번째 행 모두 가져옴."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DtxCf_Rf32LQ"
      },
      "outputs": [],
      "source": [
        "# Access a range of rows\n",
        "df.loc[2:5, :] # 2,3,4 행과 / 열 전부 다"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Zm8edm9Z32LQ"
      },
      "outputs": [],
      "source": [
        "# Filter keeping only rows with `sepal_length` > 5\n",
        "df[df.sepal_length > 5] # sepal_length의 값이 5보다 큰 경우만 가져와라. data frame으로."
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Accessing a cell"
      ],
      "metadata": {
        "id": "lcXgjiuwM4SR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.loc[:, 'sepal_length'][4] #row나 column이 아니라 하나의 셀을 가져옴.sepal_length의 column을 통째로 가져와서 그중 4 번째."
      ],
      "metadata": {
        "id": "an1xbTN4Q1vA",
        "outputId": "459d6495-fb29-49fc-9ff3-81b08df472e8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4.6"
            ]
          },
          "metadata": {},
          "execution_count": 68
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['sepal_length'][4]"
      ],
      "metadata": {
        "id": "PJw7-zu4M4or",
        "outputId": "3d0bb0e1-ff8b-48ff-ab3c-f459b43b7942",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4.6"
            ]
          },
          "metadata": {},
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.sepal_length[4]"
      ],
      "metadata": {
        "id": "HkMdk-H-Q1lL",
        "outputId": "1fb2ebe4-9d50-4c4a-d123-e0c2dd1d834f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4.6"
            ]
          },
          "metadata": {},
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "26641I8q32LR"
      },
      "source": [
        "### Adding/Removing new columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-EZ10v9s32LR"
      },
      "outputs": [],
      "source": [
        "df['new_column'] = 1 #열을 추가/삭제 하는 법. 하나의 column을 1로 통일해서 통으로 추가하겠다.\n",
        "df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "O2P8oNUm32LR"
      },
      "outputs": [],
      "source": [
        "df['new_column'] = [1, 2, 3, 4, 5] # new column에 12345\n",
        "df"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = df.drop('new_column', axis=1) # axis=1: column    #df.drop하면 통으로 삭제. (axis는 축. axis=0이면 행에서. axis=1이면 열 축에서 new_column을 찾아라. 찾아서 drop해라.)\n",
        "df"
      ],
      "metadata": {
        "id": "WTTZwNEZSS2C"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Adding/Removing new rows"
      ],
      "metadata": {
        "id": "f5sF36S2Tob3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.loc[5, :] = '' # 행을 추가/삭제하는 법. 5번 째 row를 만들어서 '' 즉, 공백으로 채워라.\n",
        "df"
      ],
      "metadata": {
        "id": "BGdOrz-kRbhv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = df.drop(5, axis=0) # axis=0: row  #axis=0, 즉 행 축에서 5를 찾아 drop해라.\n",
        "df"
      ],
      "metadata": {
        "id": "0q5Oov0CS_aZ"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}